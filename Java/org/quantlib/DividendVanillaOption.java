/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class DividendVanillaOption extends Instrument {
  private transient long swigCPtr;

  protected DividendVanillaOption(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.DividendVanillaOption_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(DividendVanillaOption obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_DividendVanillaOption(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public DividendVanillaOption(Payoff payoff, Exercise exercise, DateVector dividendDates, DoubleVector dividends) {
    this(QuantLibJNI.new_DividendVanillaOption(Payoff.getCPtr(payoff), payoff, Exercise.getCPtr(exercise), exercise, DateVector.getCPtr(dividendDates), dividendDates, DoubleVector.getCPtr(dividends), dividends), true);
  }

  public SampledCurve priceCurve() {
    return new SampledCurve(QuantLibJNI.DividendVanillaOption_priceCurve(swigCPtr, this), true);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations, double minVol, double maxVol) {
    return QuantLibJNI.DividendVanillaOption_impliedVolatility__SWIG_0(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations, minVol, maxVol);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations, double minVol) {
    return QuantLibJNI.DividendVanillaOption_impliedVolatility__SWIG_1(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations, minVol);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations) {
    return QuantLibJNI.DividendVanillaOption_impliedVolatility__SWIG_2(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy) {
    return QuantLibJNI.DividendVanillaOption_impliedVolatility__SWIG_3(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process) {
    return QuantLibJNI.DividendVanillaOption_impliedVolatility__SWIG_4(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process);
  }

  public double delta() {
    return QuantLibJNI.DividendVanillaOption_delta(swigCPtr, this);
  }

  public double gamma() {
    return QuantLibJNI.DividendVanillaOption_gamma(swigCPtr, this);
  }

  public double theta() {
    return QuantLibJNI.DividendVanillaOption_theta(swigCPtr, this);
  }

  public double thetaPerDay() {
    return QuantLibJNI.DividendVanillaOption_thetaPerDay(swigCPtr, this);
  }

  public double vega() {
    return QuantLibJNI.DividendVanillaOption_vega(swigCPtr, this);
  }

  public double rho() {
    return QuantLibJNI.DividendVanillaOption_rho(swigCPtr, this);
  }

  public double dividendRho() {
    return QuantLibJNI.DividendVanillaOption_dividendRho(swigCPtr, this);
  }

  public double strikeSensitivity() {
    return QuantLibJNI.DividendVanillaOption_strikeSensitivity(swigCPtr, this);
  }

}
