/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class RiskStatistics extends Statistics {
  private transient long swigCPtr;

  protected RiskStatistics(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.RiskStatistics_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(RiskStatistics obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_RiskStatistics(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public double semiVariance() {
    return QuantLibJNI.RiskStatistics_semiVariance(swigCPtr, this);
  }

  public double semiDeviation() {
    return QuantLibJNI.RiskStatistics_semiDeviation(swigCPtr, this);
  }

  public double downsideVariance() {
    return QuantLibJNI.RiskStatistics_downsideVariance(swigCPtr, this);
  }

  public double downsideDeviation() {
    return QuantLibJNI.RiskStatistics_downsideDeviation(swigCPtr, this);
  }

  public double regret(double target) {
    return QuantLibJNI.RiskStatistics_regret(swigCPtr, this, target);
  }

  public double potentialUpside(double percentile) {
    return QuantLibJNI.RiskStatistics_potentialUpside(swigCPtr, this, percentile);
  }

  public double valueAtRisk(double percentile) {
    return QuantLibJNI.RiskStatistics_valueAtRisk(swigCPtr, this, percentile);
  }

  public double expectedShortfall(double percentile) {
    return QuantLibJNI.RiskStatistics_expectedShortfall(swigCPtr, this, percentile);
  }

  public double shortfall(double target) {
    return QuantLibJNI.RiskStatistics_shortfall(swigCPtr, this, target);
  }

  public double averageShortfall(double target) {
    return QuantLibJNI.RiskStatistics_averageShortfall(swigCPtr, this, target);
  }

  public RiskStatistics() {
    this(QuantLibJNI.new_RiskStatistics(), true);
  }

}
