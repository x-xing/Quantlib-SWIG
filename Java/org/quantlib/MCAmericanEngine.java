/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class MCAmericanEngine extends PricingEngine {
  private transient long swigCPtr;

  protected MCAmericanEngine(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.MCAmericanEngine_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MCAmericanEngine obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_MCAmericanEngine(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t antitheticVariateCalibration, long seedCalibration) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_0(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, polynomType.swigValue(), nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t.getCPtr(antitheticVariateCalibration), seedCalibration), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t antitheticVariateCalibration) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_1(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, polynomType.swigValue(), nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t.getCPtr(antitheticVariateCalibration)), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_2(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, polynomType.swigValue(), nCalibrationSamples), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_3(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, polynomType.swigValue()), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_4(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_5(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance, int maxSamples) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_6(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples, double requiredTolerance) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_7(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate, int requiredSamples) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_8(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate, boolean controlVariate) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_9(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear, boolean antitheticVariate) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_10(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear, antitheticVariate), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps, int timeStepsPerYear) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_11(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps, timeStepsPerYear), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits, int timeSteps) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_12(GeneralizedBlackScholesProcess.getCPtr(process), process, traits, timeSteps), true);
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, String traits) {
    this(QuantLibJNI.new_MCAmericanEngine__SWIG_13(GeneralizedBlackScholesProcess.getCPtr(process), process, traits), true);
  }

  public final static _VanillaSwap.Type Receiver = _VanillaSwap.Type.swigToEnum(QuantLibJNI.MCAmericanEngine_Receiver_get());
  public final static _VanillaSwap.Type Payer = _VanillaSwap.Type.swigToEnum(QuantLibJNI.MCAmericanEngine_Payer_get());
}
