/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class MarkovFunctional extends Gaussian1dModel {
  private transient long swigCPtr;

  protected MarkovFunctional(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.MarkovFunctional_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MarkovFunctional obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_MarkovFunctional(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap, double marketRateAccuracy, double lowerRateBound, double upperRateBound, int adjustments, DoubleVector smileMoneyCheckpoints) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_0(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap, marketRateAccuracy, lowerRateBound, upperRateBound, adjustments, DoubleVector.getCPtr(smileMoneyCheckpoints), smileMoneyCheckpoints), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap, double marketRateAccuracy, double lowerRateBound, double upperRateBound, int adjustments) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_1(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap, marketRateAccuracy, lowerRateBound, upperRateBound, adjustments), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap, double marketRateAccuracy, double lowerRateBound, double upperRateBound) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_2(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap, marketRateAccuracy, lowerRateBound, upperRateBound), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap, double marketRateAccuracy, double lowerRateBound) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_3(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap, marketRateAccuracy, lowerRateBound), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap, double marketRateAccuracy) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_4(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap, marketRateAccuracy), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints, double digitalGap) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_5(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints, digitalGap), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs, long gaussHermitePoints) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_6(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs, gaussHermitePoints), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints, double yStdDevs) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_7(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints, yStdDevs), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase, long yGridPoints) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_8(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase, yGridPoints), true);
  }

  public MarkovFunctional(YieldTermStructureHandle termStructure, double reversion, DateVector volstepdates, DoubleVector volatilities, SwaptionVolatilityStructureHandle swaptionVol, DateVector swaptionExpiries, PeriodVector swaptionTenors, SwapIndex swapIndexBase) {
    this(QuantLibJNI.new_MarkovFunctional__SWIG_9(YieldTermStructureHandle.getCPtr(termStructure), termStructure, reversion, DateVector.getCPtr(volstepdates), volstepdates, DoubleVector.getCPtr(volatilities), volatilities, SwaptionVolatilityStructureHandle.getCPtr(swaptionVol), swaptionVol, DateVector.getCPtr(swaptionExpiries), swaptionExpiries, PeriodVector.getCPtr(swaptionTenors), swaptionTenors, SwapIndex.getCPtr(swapIndexBase), swapIndexBase), true);
  }

  public void calibrate(CalibrationHelperVector helper, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint, DoubleVector weights, BoolVector fixParameters) {
    QuantLibJNI.MarkovFunctional_calibrate__SWIG_0(swigCPtr, this, CalibrationHelperVector.getCPtr(helper), helper, OptimizationMethod.getCPtr(method), method, EndCriteria.getCPtr(endCriteria), endCriteria, Constraint.getCPtr(constraint), constraint, DoubleVector.getCPtr(weights), weights, BoolVector.getCPtr(fixParameters), fixParameters);
  }

  public void calibrate(CalibrationHelperVector helper, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint, DoubleVector weights) {
    QuantLibJNI.MarkovFunctional_calibrate__SWIG_1(swigCPtr, this, CalibrationHelperVector.getCPtr(helper), helper, OptimizationMethod.getCPtr(method), method, EndCriteria.getCPtr(endCriteria), endCriteria, Constraint.getCPtr(constraint), constraint, DoubleVector.getCPtr(weights), weights);
  }

  public void calibrate(CalibrationHelperVector helper, OptimizationMethod method, EndCriteria endCriteria, Constraint constraint) {
    QuantLibJNI.MarkovFunctional_calibrate__SWIG_2(swigCPtr, this, CalibrationHelperVector.getCPtr(helper), helper, OptimizationMethod.getCPtr(method), method, EndCriteria.getCPtr(endCriteria), endCriteria, Constraint.getCPtr(constraint), constraint);
  }

  public void calibrate(CalibrationHelperVector helper, OptimizationMethod method, EndCriteria endCriteria) {
    QuantLibJNI.MarkovFunctional_calibrate__SWIG_3(swigCPtr, this, CalibrationHelperVector.getCPtr(helper), helper, OptimizationMethod.getCPtr(method), method, EndCriteria.getCPtr(endCriteria), endCriteria);
  }

  public Array volatility() {
    return new Array(QuantLibJNI.MarkovFunctional_volatility(swigCPtr, this), false);
  }

  public final static MarkovFunctionalSettings.Adjustments AdjustNone = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_AdjustNone_get());
  public final static MarkovFunctionalSettings.Adjustments AdjustDigitals = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_AdjustDigitals_get());
  public final static MarkovFunctionalSettings.Adjustments AdjustYts = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_AdjustYts_get());
  public final static MarkovFunctionalSettings.Adjustments ExtrapolatePayoffFlat = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_ExtrapolatePayoffFlat_get());
  public final static MarkovFunctionalSettings.Adjustments NoPayoffExtrapolation = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_NoPayoffExtrapolation_get());
  public final static MarkovFunctionalSettings.Adjustments KahaleSmile = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_KahaleSmile_get());
  public final static MarkovFunctionalSettings.Adjustments SmileExponentialExtrapolation = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_SmileExponentialExtrapolation_get());
  public final static MarkovFunctionalSettings.Adjustments KahaleInterpolation = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_KahaleInterpolation_get());
  public final static MarkovFunctionalSettings.Adjustments SmileDeleteArbitragePoints = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_SmileDeleteArbitragePoints_get());
  public final static MarkovFunctionalSettings.Adjustments SabrSmile = MarkovFunctionalSettings.Adjustments.swigToEnum(QuantLibJNI.MarkovFunctional_SabrSmile_get());
}
