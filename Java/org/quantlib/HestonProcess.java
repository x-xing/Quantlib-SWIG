/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class HestonProcess extends StochasticProcess {
  private transient long swigCPtr;

  protected HestonProcess(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.HestonProcess_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HestonProcess obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_HestonProcess(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public HestonProcess(YieldTermStructureHandle riskFreeTS, YieldTermStructureHandle dividendTS, QuoteHandle s0, double v0, double kappa, double theta, double sigma, double rho) {
    this(QuantLibJNI.new_HestonProcess(YieldTermStructureHandle.getCPtr(riskFreeTS), riskFreeTS, YieldTermStructureHandle.getCPtr(dividendTS), dividendTS, QuoteHandle.getCPtr(s0), s0, v0, kappa, theta, sigma, rho), true);
  }

  public QuoteHandle s0() {
    return new QuoteHandle(QuantLibJNI.HestonProcess_s0(swigCPtr, this), true);
  }

  public YieldTermStructureHandle dividendYield() {
    return new YieldTermStructureHandle(QuantLibJNI.HestonProcess_dividendYield(swigCPtr, this), true);
  }

  public YieldTermStructureHandle riskFreeRate() {
    return new YieldTermStructureHandle(QuantLibJNI.HestonProcess_riskFreeRate(swigCPtr, this), true);
  }

}
