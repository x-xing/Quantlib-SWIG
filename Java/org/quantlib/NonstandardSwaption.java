/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class NonstandardSwaption extends Instrument {
  private transient long swigCPtr;

  protected NonstandardSwaption(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.NonstandardSwaption_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NonstandardSwaption obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_NonstandardSwaption(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public NonstandardSwaption(NonstandardSwap nonstandardSwap, Exercise exercise, Settlement.Type type) {
    this(QuantLibJNI.new_NonstandardSwaption__SWIG_0(NonstandardSwap.getCPtr(nonstandardSwap), nonstandardSwap, Exercise.getCPtr(exercise), exercise, type.swigValue()), true);
  }

  public NonstandardSwaption(NonstandardSwap nonstandardSwap, Exercise exercise) {
    this(QuantLibJNI.new_NonstandardSwaption__SWIG_1(NonstandardSwap.getCPtr(nonstandardSwap), nonstandardSwap, Exercise.getCPtr(exercise), exercise), true);
  }

  public CalibrationHelperVector calibrationBasket(Index standardSwapBase, SwaptionVolatilityStructure swaptionVolatility, String typeStr) {
    return new CalibrationHelperVector(QuantLibJNI.NonstandardSwaption_calibrationBasket(swigCPtr, this, Index.getCPtr(standardSwapBase), standardSwapBase, SwaptionVolatilityStructure.getCPtr(swaptionVolatility), swaptionVolatility, typeStr), true);
  }

  public NonstandardSwap underlyingSwap() {
    return new NonstandardSwap(QuantLibJNI.NonstandardSwaption_underlyingSwap(swigCPtr, this), true);
  }

  public DoubleVector probabilities() {
    return new DoubleVector(QuantLibJNI.NonstandardSwaption_probabilities(swigCPtr, this), true);
  }

}
