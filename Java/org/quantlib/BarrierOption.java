/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.quantlib;

public class BarrierOption extends Instrument {
  private transient long swigCPtr;

  protected BarrierOption(long cPtr, boolean cMemoryOwn) {
    super(QuantLibJNI.BarrierOption_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BarrierOption obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        QuantLibJNI.delete_BarrierOption(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BarrierOption(Barrier.Type barrierType, double barrier, double rebate, Payoff payoff, Exercise exercise) {
    this(QuantLibJNI.new_BarrierOption(barrierType.swigValue(), barrier, rebate, Payoff.getCPtr(payoff), payoff, Exercise.getCPtr(exercise), exercise), true);
  }

  public SampledCurve priceCurve() {
    return new SampledCurve(QuantLibJNI.BarrierOption_priceCurve(swigCPtr, this), true);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations, double minVol, double maxVol) {
    return QuantLibJNI.BarrierOption_impliedVolatility__SWIG_0(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations, minVol, maxVol);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations, double minVol) {
    return QuantLibJNI.BarrierOption_impliedVolatility__SWIG_1(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations, minVol);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy, long maxEvaluations) {
    return QuantLibJNI.BarrierOption_impliedVolatility__SWIG_2(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy, maxEvaluations);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process, double accuracy) {
    return QuantLibJNI.BarrierOption_impliedVolatility__SWIG_3(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process, accuracy);
  }

  public double impliedVolatility(double targetValue, GeneralizedBlackScholesProcess process) {
    return QuantLibJNI.BarrierOption_impliedVolatility__SWIG_4(swigCPtr, this, targetValue, GeneralizedBlackScholesProcess.getCPtr(process), process);
  }

  public double delta() {
    return QuantLibJNI.BarrierOption_delta(swigCPtr, this);
  }

  public double gamma() {
    return QuantLibJNI.BarrierOption_gamma(swigCPtr, this);
  }

  public double theta() {
    return QuantLibJNI.BarrierOption_theta(swigCPtr, this);
  }

  public double thetaPerDay() {
    return QuantLibJNI.BarrierOption_thetaPerDay(swigCPtr, this);
  }

  public double vega() {
    return QuantLibJNI.BarrierOption_vega(swigCPtr, this);
  }

  public double rho() {
    return QuantLibJNI.BarrierOption_rho(swigCPtr, this);
  }

  public double dividendRho() {
    return QuantLibJNI.BarrierOption_dividendRho(swigCPtr, this);
  }

  public double strikeSensitivity() {
    return QuantLibJNI.BarrierOption_strikeSensitivity(swigCPtr, this);
  }

}
