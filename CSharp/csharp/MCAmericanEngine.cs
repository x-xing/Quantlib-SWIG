//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class MCAmericanEngine : PricingEngine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal MCAmericanEngine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.MCAmericanEngine_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MCAmericanEngine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MCAmericanEngine() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_MCAmericanEngine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t antitheticVariateCalibration, uint seedCalibration) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_0(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t.getCPtr(antitheticVariateCalibration), seedCalibration), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t antitheticVariateCalibration) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_1(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples, SWIGTYPE_p_boost__optionalT_bool_t.getCPtr(antitheticVariateCalibration)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType, int nCalibrationSamples) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_2(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType, nCalibrationSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder, LsmBasisSystem.PolynomType polynomType) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_3(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder, (int)polynomType), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed, int polynomOrder) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_4(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed, polynomOrder), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples, int seed) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_5(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples, seed), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance, int maxSamples) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_6(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance, maxSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples, double requiredTolerance) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_7(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples, requiredTolerance), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate, int requiredSamples) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_8(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate, requiredSamples), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate, bool controlVariate) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_9(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate, controlVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear, bool antitheticVariate) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_10(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear, antitheticVariate), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps, int timeStepsPerYear) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_11(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps, timeStepsPerYear), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits, int timeSteps) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_12(GeneralizedBlackScholesProcess.getCPtr(process), traits, timeSteps), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public MCAmericanEngine(GeneralizedBlackScholesProcess process, string traits) : this(NQuantLibcPINVOKE.new_MCAmericanEngine__SWIG_13(GeneralizedBlackScholesProcess.getCPtr(process), traits), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public static readonly _VanillaSwap.Type Receiver = (_VanillaSwap.Type)NQuantLibcPINVOKE.MCAmericanEngine_Receiver_get();
  public static readonly _VanillaSwap.Type Payer = (_VanillaSwap.Type)NQuantLibcPINVOKE.MCAmericanEngine_Payer_get();
}

}
