//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class CallableFixedRateBond : Bond {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CallableFixedRateBond(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.CallableFixedRateBond_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CallableFixedRateBond obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CallableFixedRateBond() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_CallableFixedRateBond(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public CallableFixedRateBond(int settlementDays, double faceAmount, Schedule schedule, DoubleVector coupons, DayCounter accrualDayCounter, BusinessDayConvention paymentConvention, double redemption, Date issueDate, CallabilitySchedule putCallSchedule) : this(NQuantLibcPINVOKE.new_CallableFixedRateBond(settlementDays, faceAmount, Schedule.getCPtr(schedule), DoubleVector.getCPtr(coupons), DayCounter.getCPtr(accrualDayCounter), (int)paymentConvention, redemption, Date.getCPtr(issueDate), CallabilitySchedule.getCPtr(putCallSchedule)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public double OAS(double cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate, double accuracy, uint maxIterations, double guess) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_OAS__SWIG_0(swigCPtr, cleanPrice, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlementDate), accuracy, maxIterations, guess);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OAS(double cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate, double accuracy, uint maxIterations) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_OAS__SWIG_1(swigCPtr, cleanPrice, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlementDate), accuracy, maxIterations);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OAS(double cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate, double accuracy) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_OAS__SWIG_2(swigCPtr, cleanPrice, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlementDate), accuracy);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OAS(double cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq, Date settlementDate) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_OAS__SWIG_3(swigCPtr, cleanPrice, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dc), (int)compounding, (int)freq, Date.getCPtr(settlementDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double OAS(double cleanPrice, YieldTermStructureHandle engineTS, DayCounter dc, Compounding compounding, Frequency freq) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_OAS__SWIG_4(swigCPtr, cleanPrice, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dc), (int)compounding, (int)freq);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cleanPriceOAS(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, Date settlementDate) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_cleanPriceOAS__SWIG_0(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency, Date.getCPtr(settlementDate));
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double cleanPriceOAS(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_cleanPriceOAS__SWIG_1(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double effectiveDuration(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, double bump) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_effectiveDuration__SWIG_0(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency, bump);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double effectiveDuration(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_effectiveDuration__SWIG_1(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double effectiveConvexity(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency, double bump) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_effectiveConvexity__SWIG_0(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency, bump);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double effectiveConvexity(double oas, YieldTermStructureHandle engineTS, DayCounter dayCounter, Compounding compounding, Frequency frequency) {
    double ret = NQuantLibcPINVOKE.CallableFixedRateBond_effectiveConvexity__SWIG_1(swigCPtr, oas, YieldTermStructureHandle.getCPtr(engineTS), DayCounter.getCPtr(dayCounter), (int)compounding, (int)frequency);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
