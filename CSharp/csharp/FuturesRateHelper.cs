//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class FuturesRateHelper : RateHelper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FuturesRateHelper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FuturesRateHelper_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FuturesRateHelper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FuturesRateHelper() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_FuturesRateHelper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, uint nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, QuoteHandle convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_0(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), nMonths, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), QuoteHandle.getCPtr(convexityAdjustment), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, uint nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, QuoteHandle convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_1(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), nMonths, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), QuoteHandle.getCPtr(convexityAdjustment)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, uint nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, double convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_2(price, Date.getCPtr(iborStartDate), nMonths, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), convexityAdjustment, (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, uint nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter, double convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_3(price, Date.getCPtr(iborStartDate), nMonths, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter), convexityAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, uint nMonths, Calendar calendar, BusinessDayConvention convention, bool endOfMonth, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_4(price, Date.getCPtr(iborStartDate), nMonths, Calendar.getCPtr(calendar), (int)convention, endOfMonth, DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, QuoteHandle convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_5(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), Date.getCPtr(iborEndDate), DayCounter.getCPtr(dayCounter), QuoteHandle.getCPtr(convexityAdjustment), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, QuoteHandle convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_6(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), Date.getCPtr(iborEndDate), DayCounter.getCPtr(dayCounter), QuoteHandle.getCPtr(convexityAdjustment)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, double convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_7(price, Date.getCPtr(iborStartDate), Date.getCPtr(iborEndDate), DayCounter.getCPtr(dayCounter), convexityAdjustment, (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter, double convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_8(price, Date.getCPtr(iborStartDate), Date.getCPtr(iborEndDate), DayCounter.getCPtr(dayCounter), convexityAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, Date iborEndDate, DayCounter dayCounter) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_9(price, Date.getCPtr(iborStartDate), Date.getCPtr(iborEndDate), DayCounter.getCPtr(dayCounter)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, IborIndex index, QuoteHandle convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_10(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), IborIndex.getCPtr(index), QuoteHandle.getCPtr(convexityAdjustment), (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(QuoteHandle price, Date iborStartDate, IborIndex index, QuoteHandle convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_11(QuoteHandle.getCPtr(price), Date.getCPtr(iborStartDate), IborIndex.getCPtr(index), QuoteHandle.getCPtr(convexityAdjustment)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, IborIndex index, double convexityAdjustment, Futures.Type type) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_12(price, Date.getCPtr(iborStartDate), IborIndex.getCPtr(index), convexityAdjustment, (int)type), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, IborIndex index, double convexityAdjustment) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_13(price, Date.getCPtr(iborStartDate), IborIndex.getCPtr(index), convexityAdjustment), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public FuturesRateHelper(double price, Date iborStartDate, IborIndex index) : this(NQuantLibcPINVOKE.new_FuturesRateHelper__SWIG_14(price, Date.getCPtr(iborStartDate), IborIndex.getCPtr(index)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

}

}
