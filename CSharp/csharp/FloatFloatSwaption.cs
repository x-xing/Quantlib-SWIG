//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace QuantLib {

public class FloatFloatSwaption : Instrument {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FloatFloatSwaption(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NQuantLibcPINVOKE.FloatFloatSwaption_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FloatFloatSwaption obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~FloatFloatSwaption() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NQuantLibcPINVOKE.delete_FloatFloatSwaption(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public FloatFloatSwaption(FloatFloatSwap simpleSwap, Exercise exercise) : this(NQuantLibcPINVOKE.new_FloatFloatSwaption(FloatFloatSwap.getCPtr(simpleSwap), Exercise.getCPtr(exercise)), true) {
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
  }

  public CalibrationHelperVector calibrationBasket(Index standardSwapBase, SwaptionVolatilityStructure swaptionVolatility, string typeStr) {
    CalibrationHelperVector ret = new CalibrationHelperVector(NQuantLibcPINVOKE.FloatFloatSwaption_calibrationBasket(swigCPtr, Index.getCPtr(standardSwapBase), SwaptionVolatilityStructure.getCPtr(swaptionVolatility), typeStr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double underlyingValue() {
    double ret = NQuantLibcPINVOKE.FloatFloatSwaption_underlyingValue(swigCPtr);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FloatFloatSwap underlyingSwap() {
    FloatFloatSwap ret = new FloatFloatSwap(NQuantLibcPINVOKE.FloatFloatSwaption_underlyingSwap(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DoubleVector probabilities() {
    DoubleVector ret = new DoubleVector(NQuantLibcPINVOKE.FloatFloatSwaption_probabilities(swigCPtr), true);
    if (NQuantLibcPINVOKE.SWIGPendingException.Pending) throw NQuantLibcPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
